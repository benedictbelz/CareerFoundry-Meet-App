{"version":3,"sources":["components/Event.js","components/EventList.js","components/CitySearch.js","components/NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","showDetails","this","setState","className","onClick","handleClick","Component","EventList","events","props","map","event","id","CitySearch","handleInput","value","target","suggestions","locations","filter","location","toUpperCase","indexOf","query","suggestion","type","onChange","NumberOfEvents","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6NAgCeA,E,kDA5BX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,aAAa,GAHP,E,+CAOd,WACSC,KAAKF,MAAMC,YAGZC,KAAKC,SAAS,CAAEF,aAAa,IAF7BC,KAAKC,SAAS,CAAEF,aAAa,M,oBAKxC,WAAU,IAAD,OACR,OACU,sBAAKG,UAAU,QAAf,UACI,wBACIA,UAAU,cACVC,QAAS,kBAAM,EAAKC,eAFxB,0BAIA,qBAAKF,UAAU,UAAf,oC,GAvBIG,aCgBLC,E,4JAdd,WACO,IAAQC,EAAWP,KAAKQ,MAAhBD,OACd,OACU,oBAAIL,UAAU,YAAd,SACKK,EAAOE,KAAI,SAAAC,GAAK,OACb,6BACI,cAAC,EAAD,CAAOA,MAAOA,KADTA,EAAMC,a,GANXN,aC2CTO,E,kDA3Cd,aAAe,IAAD,8BACb,gBAODC,YAAc,SAAAH,GACb,IAAMI,EAAQJ,EAAMK,OAAOD,MACfE,EAAc,EAAKR,MAAMS,UAAUC,QAAO,SAAAC,GAAQ,OAAIA,EAASC,cAAcC,QAAQP,EAAMM,gBAAkB,KACzH,EAAKnB,SAAS,CAAEqB,MAAOR,EAAQE,iBAXlB,EAcXZ,YAAc,SAAAmB,GACV,EAAKtB,SAAS,CAAEqB,MAAOC,KAb7B,EAAKzB,MAAQ,CACZwB,MAAO,GACPN,YAAa,IAJD,E,0CAkBd,WAAU,IAAD,OACR,OACC,sBAAKd,UAAU,aAAf,UACC,uBACCsB,KAAK,OACLtB,UAAU,OACVY,MAAOd,KAAKF,MAAMwB,MAClBG,SAAUzB,KAAKa,cAEhB,qBAAIX,UAAU,cAAd,UACEF,KAAKF,MAAMkB,YAAYP,KAAI,SAAAc,GAAU,OACrC,oBAEsBpB,QAAS,kBAAM,EAAKC,YAAYmB,IAFtD,SAGoBA,GAFOA,MAI5B,6BACC,gDADO,iB,GAnCYlB,aC0BVqB,E,kDAxBX,aAAe,IAAD,8BACV,gBAMJb,YAAc,SAAAH,GACV,EAAKT,SAAS,CAAEqB,MAAOZ,EAAMK,OAAOD,SANpC,EAAKhB,MAAQ,CACTwB,MAAO,IAHD,E,0CAWjB,WACC,OACU,qBAAKpB,UAAU,iBAAf,SACI,uBACIsB,KAAK,OACLtB,UAAU,sBACVY,MAAOd,KAAKF,MAAMwB,MAClBG,SAAUzB,KAAKa,oB,GApBNR,aCiBdsB,G,kKAXd,WACC,OACC,sBAAKzB,UAAU,MAAf,UACC,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GANcG,cCKEuB,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SFoHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEtH5BtB,M","file":"static/js/main.7539d8ff.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Event extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            showDetails: false\n        }\n    }\n\n    handleClick() {\n        if (!this.state.showDetails)\n            this.setState({ showDetails: true });\n        else\n            this.setState({ showDetails: false });\n    }\n\n\trender() {\n\t\treturn (\n            <div className='event'>\n                <button \n                    className='showDetails'\n                    onClick={() => this.handleClick()}\n                >Show Details</button>\n                <div className='details'>\n                    More Details...\n                </div>\n            </div>\n        );\n\t}\n}\nexport default Event;\n","import React, { Component } from 'react';\nimport Event from './Event'\n\nclass EventList extends Component {\n\trender() {\n        const { events } = this.props;\n\t\treturn (\n            <ul className='EventList'>\n                {events.map(event => \n                    <li key={event.id}>\n                        <Event event={event} />\n                    </li>\n                )}\n            </ul>\n        );\n\t}\n}\n\nexport default EventList;\n","import React, { Component } from 'react';\n\nclass CitySearch extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tquery: '',\n\t\t\tsuggestions: [],\n\t\t};\n\t}\n\n\thandleInput = event => {\n\t\tconst value = event.target.value;\n        const suggestions = this.props.locations.filter(location => location.toUpperCase().indexOf(value.toUpperCase()) > -1);\n\t\tthis.setState({ query: value,  suggestions });\n\t};\n\n    handleClick = suggestion => {\n        this.setState({ query: suggestion });\n    }\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"CitySearch\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName=\"city\"\n\t\t\t\t\tvalue={this.state.query}\n\t\t\t\t\tonChange={this.handleInput}\n\t\t\t\t/>\n\t\t\t\t<ul className=\"suggestions\">\n\t\t\t\t\t{this.state.suggestions.map(suggestion => (\n\t\t\t\t\t\t<li \n                            key={suggestion}\n                            onClick={() => this.handleClick(suggestion)}\n                        >{suggestion}</li>\n\t\t\t\t\t))}\n\t\t\t\t\t<li key=\"all\">\n\t\t\t\t\t\t<b>See all cities</b>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default CitySearch;\n","import React, { Component } from 'react';\n\nclass NumberOfEvents extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            query: ''\n        }\n    }\n\n    handleInput = event => {\n        this.setState({ query: event.target.value });\n    }\n\n\trender() {\n\t\treturn (\n            <div className='numberOfEvents'>\n                <input \n                    type='text'\n                    className='numberOfEventsInput'\n                    value={this.state.query}\n                    onChange={this.handleInput}\n                />\n            </div>\n        );\n\t}\n}\nexport default NumberOfEvents;\n","import React, { Component } from 'react';\nimport { mockData } from './mock-data';\nimport EventList from './components/EventList';\nimport CitySearch from './components/CitySearch';\nimport NumberOfEvents from './components/NumberOfEvents';\nimport './App.css';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<CitySearch />\n\t\t\t\t<EventList />\n\t\t\t\t<NumberOfEvents />\n\t\t\t</div>\t\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\nserviceWorkerRegistration.unregister();\nreportWebVitals();\n"],"sourceRoot":""}